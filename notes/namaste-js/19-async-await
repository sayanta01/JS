# Just syntactic sugar for writing async code like sync code

async - keyword that makes functions always return a Promises
await - pauses the execution of the async function until the Promise settles
# async function getData() { return "Namaste"; }
# const data = getData();
# data.then((res) => console.log(res)); // get actual data

const p = new Promise((resolve, reject) => {
  resolve("Promise Resolved Value!!");
});

How we used to handle promises before?
# function getData() {
#   p.then((res) => console.log(res));
# }
# getData();

Used to handle promises:
await - wait until the promise settles and returns its result
# async function handlePromise() {
#   const val = await p; // wait for p to resolve
#   console.log(val);
# }
# handlePromise();

What problem async/await solve?
- Promises can be hard to read, especially with long chains
- async/await makes async code look like sync code # readability and maintainability
- when we use async/await, we rarely need .then, because await handles the waiting for us

Why async/await is special?
// Both promises start in parallel when created, but are awaited sequentially
const p = new Promise((res) =>
  setTimeout(() => res("Promise Resolved Value"), 9000),
);
const p2 = new Promise((res) =>
  setTimeout(() => res("--Promise Resolved Value--"), 3000),
);

async function handlePromise() {
  console.log("Hello World!!");
  // async/await makes async code behave like synchronous code
  const val = await p; // here, JS engine waits for promise to resolve
  console.log("Namaste JS");
  console.log(val);

  const val2 = await p2; // already resolved, so it returns instantly
  console.log("--Namaste JS--");
  console.log(val2);
}
handlePromise();

How the promise execution behavior works?
- `await p` suspends function execution for 9s # blocks further execution
- p2 resolves in 3s (in Web API) but isn't handled yet due to `await p`
- Web API (setTimeout) runs independently in the background, separate of the main call stack
- After 9s, execution resumes, and `p2` returns instantly
- `await` enforces sequential execution, even if promises start together
- promises start in parallel, but await forces sequential execution
- call stack execution is blocked at await p; so p2 has to wait, even if it's already done

# function getData() {
#   // older way to handle promise
#   p.then((res) => console.log(res)); // does not wait for promise to resolve
#   console.log("Namaste JS"); // this prints first
# }
# getData();

How fetch function works? # fetch() > Promise > Response.json > JSON
What fetch returns actually? # Response - https://api.github.com/
- fetch() returns a Promise that resolves to a Response object
- The Response object has a body which is a readable stream
- Response.json() reads and converts the stream to JSON
- Response.json() again returns a Promise that resolves to JSON data
- You can also convert the response body to .string/blob # extract data
Readable stream - data can be read in chunks as it arrives, not all at once

# const API_URL = "https://api.github.com/users/sayanta01";
# async function openImage() {
#   try {
#     const response = await fetch(API_URL);
#     const jsonValue = await response.json();
#     const imageUrl = jsonValue.avatar_url; // Extract the image URL
#     window.open(imageUrl, "_blank");
#   } catch (error) {
#     console.error("Error fetching image:", error);
#   }
# }
# openImage();

Vocab:
Propagates - spread and promote (an idea, theory, etc.) widely

# ------------------------------------------------------------------------------
const P = new Promise((resolve, reject) => {
  const rand = Math.floor(Math.random() * 2);
  if (rand === 0) {
    resolve();
  } else {
    reject();
  }
});

P.finally(() => console.log("Result.."))
  .then(() => console.log("Success!"))
  .then(() => console.log("Finally!"))
  .catch(() => console.error("LOL!"));

const url = "https://jsonplaceholder.typicode.com/todos/1";
async function loadData() {
  try {
    const res = await fetch(url);
    console.log(res.ok);
    const data = await res.json();
    console.log(data);
    return data; // To use it later
  } catch (err) {
    console.error(err);
  }
}
loadData();

async function main() {
  const result = await loadData();
  console.log(result); // Using the returned data
}
