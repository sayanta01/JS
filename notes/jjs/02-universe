# https://justjavascript.com/the-javascript-universe
Numbers and strings are values. Objects and functions are values, too
There are also a lot of things that are not values, like the pieces of our code—our if statements, loops, and variable declarations

# Values and Code ![Little Prince](https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578948516/just-javascript-email-images/jj02/universe.png)
One of the first common misconceptions we need to clear up is that values are our code
Instead, we need to think of them separately—our code interacts with values, but values exist in a completely separate space
- I might refer to them in my code, but they don’t exist inside my code

# Values
Broadly, there are two kinds of values:
Primitive Values - They are a permanent part of our JavaScript universe
- I can point to them, but I can’t create, destroy, or change them

Objects and Functions - Are also values but, unlike primitive values, I can manipulate them from my code
- If primitive values are like distant stars, then objects and functions are more like asteroids floating around my planet
  they’re not part of my code, but they’re close enough to manipulate

# Fun Fact
Functions are objects, but because they include a few unique additional features, we’re going to refer to them separately to avoid confusion

console.log([]); // {}, (x) => x *  2
- Notice how the browser console displays them differently from primitive values
  some browsers might display an arrow before them, or do something special when you click them

# Types of Values
After almost twenty-five years of studying JavaScript, the scientists have only discovered nine such types:
Primitive Values:
# - Undefined ( undefined ), used for unintentionally missing values
# - Null ( null ), used for intentionally missing values
# - Booleans ( true  and false ), used for logical operations
# - Numbers ( -100 , 3.14 , and others), used for math calculation
# - BigInts (uncommon and new), used for math on big numbers
# - Strings ( "hello" , "abracadabra" , and others), used for text
# - Symbols (uncommon), used to perform rituals and hide secrets # to create unique, collision-free object property keys

Objects and Functions:
# - Objects ({} and others), used to group related data and code
# - Functions (x => x * 2 and others), used to refer to code

No Other Types:
You might ask: “But what about other types I have used, like arrays?”
- In JavaScript, there are no other fundamental value types other than the ones
  we have just enumerated. The rest are all objects! For example, even arrays
  dates, and regular expressions fundamentally are objects in JavaScript

# Fun Fact
https://medium.com/weekly-webtips/autoboxing-in-javascript-a368b42d8969 
- Temporarily treats primitives as objects to call methods and then immediately discards it
- Remember that primitive values, such as numbers and strings, are not objects

# Checking a Type
# console.log(typeof("hello")); // "string"
# console.log(typeof(undefined)); // "undefined"
# console.log(typeof([])); // "object"
# console.log(typeof(x => x * 2)); // "function"

# Expressions # Think of it as a piece of code that expresses a value
If we “ask” the expression 2 + 2, JavaScript will “answer” with the value 4
Expressions are questions that JavaScript can answer. JS answers expressions in the only way it knows how—with values

# Recap
- There are values, and then there’s code. We can think of values as different
  things “floating” in our JavaScript universe. They don’t exist inside our code
  but we can refer to them from our code
- There are two categories of values: there are Primitive Values, and then
  there are Objects and Functions. In total, there are nine separate types. Each
  type serves a specific purpose, but some are rarely used
- Some values are lonely. For example, null is the only value of the Null type
  and undefined is the only value of the Undefined type. As we will learn later
  these two lonely values are quite the troublemakers!
- We can ask questions with expressions. Expressions exist in our code
  so they are not values. Rather, JavaScript will answer our expressions with values
  For example, the 2 + 2 expression is answered with the value 4
