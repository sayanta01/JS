# Learn how properties work in our JavaScript universe
- Objects are primarily useful to group related data together

# let sherlock = {
#   surname: 'Holmes',
#   age: 64, };
- Here, sherlock is still a variable, but surname and age are not. They are
  properties. Unlike variables, properties belong to a particular object
- In our JavaScript universe, both variables and properties act like “wires”
  however, the wires of properties start from objects rather than from our code
- Importantly, properties don’t contain values—they point to them! Remember that
  our universe is full of wires. Some of them start from our code (variables), and
  others start from objects (properties). All wires always point to values
- Before reading this, you might have imagined that values live “inside” objects
  because they appear “inside” in code. This intuition often leads to mistakes, so we
  will be “thinking in wires” instead

# Reading a Property - We can read a property’s current value by using the “dot notation” # console.log(sherlock.age); // 64
- Here, sherlock.age is our old friend, an expression—a question to our
  JavaScript universe. To answer it, JavaScript first follows the sherlock wire
# ![](sherlock.png)
- It leads to an object. From that object, JavaScript follows the age property
  our object’s age property points to 64, so sherlock.age results in 64

# Property Names
- If we don’t know a property name ahead of time, but we have it in code as a string
  value, we can use the [] “bracket notation” to read it from an object:
# let sherlock = { surname: 'Holmes', age: 64 };
# let propertyName = prompt('What do you want to know?');
# alert(sherlock[propertyName]); // Read property by its name

# Assigning to a Property
![](assigning.png) - We point the wire on the left side to the value on the right side

# Missing Properties - You might wonder what happens if we read a property that doesn’t exist
# let sherlock = { surname: 'Holmes', age: 64 };
# console.log(sherlock.boat); // ?

We know that sherlock.boat is a property expression, but how does our
JavaScript universe decide which value to “answer” us with?

JavaScript uses a set of rules that looks something like this:
- Figure out the value of the part before the dot (.)
- If that value is null or undefined, throw an error immediately
- Check whether a property with that name exists on our object:
  a. If it exists, answer with the value this property points to
  b. If it doesn’t exist, answer with the undefined  value

These rules are a bit simplified, but they already tell us a lot about how JavaScript
works! For example, sherlock points to an object that doesn’t have a boat
property. So sherlock.boat gives us undefined as an answer:
let sherlock = { surname: 'Holmes', age: 64 };
# console.log(sherlock.boat); // undefined

It is tempting to think sherlock.boat directly corresponds to the concept of a
property in our mental model, but that’s not quite correct. It is a question—and
so JavaScript follows the rules to answer it
# Key Idea:
When you use object.property, JavaScript doesn't assume the property exists
It simply checks and answers according to its rules—either giving you a value or undefined

console.log(sherlock.boat.name); // ? Don’t guess—follow the rules
- Hint: there are two dots, so you need to follow the rules two times

Evaluate sherlock.boat
- JavaScript looks for the `boat` property inside `sherlock`
- According to JavaScript's rules, when a property doesn’t exist, it returns undefined
- So, sherlock.boat is undefined

Evaluate undefined.name
- Now, JavaScript tries to access the `name` property on `undefined`
- But undefined is not an object, so it throws an error:
TypeError: Cannot read properties of undefined (reading 'name')

Why Does This Happen?
- Fundamentally, it’s because every expression needs to result in some value or throw an error
- Some other languages throw an error if you access a
  property that doesn’t exist—but JavaScript is not one of them! # Missing property returns `undefined`
- But accessing a property of `undefined` throws an error
- Always check if a property exists before accessing deeper properties

# - The answer is that calculating sherlock.boat.name throws an error:
# - We need to first figure out the value of sherlock.boat
# - To do that, we need to figure out the value of sherlock
# - The sherlock variable points to an object
# - Therefore, the value of sherlock is that object
# - An object is not null or undefined, so we keep going
# - That object does not have a boat property
# - Therefore, the value of sherlock.boat is undefined
# - We’ve got undefined on the left side of the dot (.)
# - The rules say that null or undefined on the left side is an error

Prevent this Error # Use optional chaining ?.
console.log(sherlock.boat?.name); // undefined (no error) // stops evaluation if boat is undefined
