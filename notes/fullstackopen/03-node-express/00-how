#
- Node.js is designed for I/O-intensive tasks, not CPU-intensive ones ??
  you can't do cpu intensive task in event loop, because when you block event loop, your all code will be stuck/slow
- Rest APi is Imp?? what is rest full form means ?
  Stateful vs non state - is node js is stateful or not 
- REST API is REpresentational State Transfer Application Programming Interface.
what does this means
- list all rest methods


# JS
generators and yield??
- All lanuage has these 3 things
- sequence - logical sequence of event
- selection - what conditional operator you can use to divert the code flow
- iteration - how many types of loops, array key value pairs

variable
- scope
- context
- closure

13:00 - imp
27:00 - imp

understand pitfalls of js - what you should avoid doing
event driven model ??


# Node
what are the top things to learn of js to learn node js
what are the top things that used in node js of javascript

what are the 20% of things that done in backend wha tis used in 80% of the time
my friend says it's crud

how node is diff that js?

where node js is suitable, and where not ?

list all the multithreading concepts?
locs?
Resources sharing?

To know a tool well, you have to know:

its history: who created it? Why? To solve which problem?
its present: who maintains it? Where do they work? On what?
its limitations: when is the tool not a good fit? When does it break?
its ecosystem: what libraries exist? Who uses it? What plugins?

rest standard


- lodash library is utiliy library
list types of library ?
- what is jwt ?


Resources:
https://www.youtube.com/watch?v=ENrzD9HAZK4&t=96s
https://www.youtube.com/watch?v=ooBxSg1Cl1w
https://www.youtube.com/watch?v=CCRTu3AQQeY
https://nodeschool.io/
https://nodejs.org/en/learn/getting-started/introduction-to-nodejs
https://www.youtube.com/watch?v=DwQ7psiU23I
https://youtu.be/Vej327jN8WI?si=PoU8vhpHSAP9UuXR
# https://www.youtube.com/watch?v=H9M02of22z4
https://youtu.be/RkD6S-3AGWQ?si=86JkgKwg6pQ2P89a - interview last part is imp










# Docs
- A Node.js app runs in a single process, without creating a new thread for every request
  Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking
  https://nodejs.org/api/ - standard library
- When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem
  instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back
- Whenever a new request is received, the request event is called, providing two objects:
  a request (an http.IncomingMessage object) and a response (an http.ServerResponse object)
- Those 2 objects are essential to handle the HTTP call
  The first provides the request details
  The second is used to return data to the caller


Differences between Node.js and the Browse:
- In the browser, most of the time what you are doing is interacting with the DOM, or other Web Platform APIs like Cookies
  Those do not exist in Node.js, of course. You don't have the document, window and all the other objects that are provided by the browser
- And in the browser, we don't have all the nice APIs that Node.js provides through its modules, like the filesystem access functionality
- Another big difference is that in Node.js you control the environment you know which version of Node.js you will run the application on
- Compared to the browser environment, where you don't get the luxury to choose what browser your visitors will use, this is very convenient


The V8 JavaScript Engine that powers Google Chrome:
- It's the thing that takes our JavaScript and executes it inside the browser
- it parses and executes JavaScript code. The DOM, and the other Web Platform APIs
  (they all make up the runtime environment) are provided by the browser
- The cool thing is that the JavaScript engine is independent of the browser in which it's hosted
  This key feature enabled the rise of Node.js. V8 was chosen to be the engine that powered Node.js
- V8 is always evolving, just like the other JavaScript engines around, to speed up the Web and the Node.js ecosystem

Compilation:
- JavaScript is generally considered an interpreted language
  but modern JavaScript engines no longer just interpret JavaScript, they compile it
What gets compiled v interpreted?
- Rarely used code - Interpreted
- Frequently run code - Compiled with JIT to speed up


NPM:
--save-dev installs and adds the entry to the package.json file devDependencies
--no-save installs but does not add the entry to the package.json file dependencies
--save-optional installs and adds the entry to the package.json file optionalDependencies
--no-optional will prevent optional dependencies from being installed

- The package.json file supports a format for specifying command line tasks that can be run by using
- Instead of typing those long commands, which are easy to forget or mistype, you can run
- npm run <task-name>
  "scripts": {
    "start-dev": "node lib/server-development",
    "start": "node lib/server-production"
    "server": "json-server -p 3001 db.json"
  }


ECMAScript 2015 (ES6) and beyond: https://node.green/


There is no difference between development and production in Node.js
- However, a few libraries in the npm registry recognize using the NODE_ENV variable and default it to a development setting
  Always run your Node.js with the NODE_ENV=production set
- A popular way of configuring your application is by using the twelve factor methodology
  https://12factor.net/


# Vocab
Quest - search for something
