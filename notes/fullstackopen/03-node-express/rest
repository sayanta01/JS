https://youtu.be/EKCM1oQQrCM?si=h3y_RkRvQNifLi_d

- There are some rules if we follow them then we can call that my server is restful
- Works on servr client archicheture
  means server and client are diff entity, they don't depends on each other
list all http methods

<!-- üî® POST: Create  - ‚ÄúHere‚Äôs a new thing‚Äù -->
<!-- üßπ PUT: Replace  - ‚ÄúHere‚Äôs the entire updated thing‚Äù -->
<!-- ‚úèÔ∏è PATCH: Modify - ‚ÄúHere‚Äôs a tweak to the thing‚Äù -->

what are other  classic confusion in backend development ?
üß± - API vs REST vs RESTful vs CRUD
API: Interface for talking to a service
REST: A style of API design (uses HTTP verbs)
RESTful: An API that follows REST principles
CRUD: The basic operations ‚Äî Create, Read, Update, Delete
‚û°Ô∏è People often say "I built a REST API" when they mean "I made endpoints that use HTTP verbs."

In REST (Representational State Transfer), the architecture is stateless ‚Äî which means:
- You have to send all necessary client state (like user ID, auth token, etc.) with every single request ‚Äî not just the first time
- The server does not remember anything about the client between requests
- So every request must carry everything the server needs to understand and respond
- So, stateless REST might carry a bit more data per request, but overall it‚Äôs actually faster and more scalable in most web environments

Top 4 Data Sent to Stateless Server:
- Authentication Token
- Request Parameters
- Content-Type Header
- User-Agent or Accept Headers

<!-- - Why does the client send a string instead of a JavaScript object? -->
<!--   Because the client and server communicate over HTTP, and HTTP is a text-based protocol -->
<!--   it can only send strings, not actual JS objects or data structures -->
<!-- üß† In technical terms: -->
<!-- JavaScript objects only exist inside the browser‚Äôs memory -->
<!-- To send them across the network, they must be converted into a plain text format -->
<!-- This is exactly what JSON.stringify() does ‚Äî it turns the object into a string -->

Stateful architecture - Server remembers previous logs or interactions
- Stateful is like a fancy restaurant:
- They remember your preferences
- But it takes more effort and resources




Endpoint - specific URL and method that the client uses to ask the server to do something or send data back
- Different URLs (and methods) that point to different actions

Example:
GET  /tasks       - returns a list of tasks
POST /tasks       - adds a new task
GET  /tasks/1     - returns task with ID 1
DELETE /tasks/1   - deletes task with ID 1

So:
"/tasks" = the path
GET = the method
Together = the endpoint
