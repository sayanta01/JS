#
- Hooks can only be called inside the body of a function component
- Donâ€™t call Hooks inside loops, conditions, or nested functions
  Instead, always use Hooks at the top level of your React function, before any early returns

âœ… Call them at the top level in the body of a function-component / custom-Hook

Itâ€™s not supported to call Hooks (functions starting with use) in any other cases, for example:
ðŸ”´ Do not call Hooks inside conditions or loops # move it outside!
ðŸ”´ Do not call Hooks in event handlers # move it outside!
ðŸ”´ Do not call Hooks inside functions passed to useMemo, useReducer, or useEffect # move it outside!
ðŸ”´ Do not call Hooks after a conditional return statement # move it before the return!
ðŸ”´ Do not call Hooks in class components # write a function component instead of a class!

# https://react.dev/learn/reusing-logic-with-custom-hooks
- Custom Hooks may call other Hooks (thatâ€™s their whole purpose)
  This works because custom Hooks are also supposed to only be called while a function component is rendering

Mismatching Versions of React and React DOM
`npm ls react-dom` `npm ls react-native` # check which version youâ€™re using
