#
- JSX is just syntatic sugar for function calls and object construction
- API Responses: The rule of thumb is to never return plaintext

https://react.dev/reference/react/memo
- memo lets you skip re-rendering a component when its props are unchanged
  lets you cache the result of a calculation between re-renders

useRef: is like a sticky note on your desk
- You jot something down and refer back to it anytime
  It stays the same through updates and doesn’t cause re-render
- Holds value that persists across renders (like a variable that doesn’t reset)
  Does not trigger re-renders when the value changes
  Provides direct access to DOM nodes

useEffect: Do this after rendering is done
Purpose: Manage side effects in React components (code that runs outside of rendering)
By default, it runs after every component render, unless you control it with the dependency array
- Fetching data from an API
- Setting up timers (setTimeout, setInterval)
- Manipulating the DOM directly
- Subscribing to events (e.g., WebSocket, resize)
- Logging, analytics
https://react.dev/learn/you-might-not-need-an-effect # use-less 🤏
Component Lifecycle

When you use setState, you can also access the current value 💡
- setState((prev) => ...) - React gives you the latest state value
- Use this when your update depends on the previous state

# - returns true if the value or type is different, otherwise false
#   person.id !== existingPerson.id ? person : returnedPerson,

# - keep only the persons whose id is not equal to updatedPerson.id
#   setPersons(persons.filter((p) => p.id !== updatedPerson.id));


# Pending ----------------------------------------------------------------------
When do i need return in a function, and when not?
- Server Components?
- Why TCP & HTTP diff?

Reconciliation: You only change the words you edited without rewriting the entire document (Efficient)
- React compares the old UI with the new UI and updates only what's changed instead of re-rendering everything
# Think of the Virtual DOM like a spot-the-difference game between two pictures (before and after)
# React plays the game, finds the differences, and only redraws the changed parts
Reconciliation - comparison - diffing
- State as a Snapshot?


# Terms
Derived state: State that can be computed from other state or props
Business logic: The rules that drive how your app functions
